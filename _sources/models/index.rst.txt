
Previous: :ref:`design_operators`


.. _models:

#########################
6. Working with ML Models
#########################

In DeepCortex, Models are generated when pipelines with specific ML Operators are executed. The are different types of models within DeepCortex, and the following sections provide more information about how Operators that generate a Model should be designed within DeepCortex:


.. _tabular_models:

6.1 Tabular Models
==================

The base class for tabular models is
`deepcortex.tabular.base_tabular_model.BaseTabularModel`.

In order to derive it, users have to implement the following methods and
properties:

- **classes** - property that returns list of classes that the model can predict.
- **predict_one** - produce a prediction based on a single table row.
- **predictors** - property that returns a list of columns significant
  for prediction. Each column should be represented as `TabularColumnMeta class`_
  instance.
- **prediction_result_meta** - property that returns a descriptor (
  represented as `TabularColumnMeta class`_ instance) of the column
  that would contain a prediction.
- **get_state_dict** - method used for saving model state into storage. It
  should return any python structure with primitives (list/set/dict of
  lists/sets/dicts or scalars, like integer/float/boolean/none).
- **set_state_dict** - method used for loading model state. Accept a structure
  of the same type as **get_state_dict** returns.

Also there is a method **predict** in the class, that produces a prediction
based on the entire dataset. A default implementation iterates over the dataset
using **predict_one** and returns a pandas *DataFrame* with a single column
containing the results of **predict_one**. It accepts two parameters:

- *dataset* - a pandas *DataFrame* with the entire input table.
- *mappings* - a dictionary with column names mapping. Key - column name
  of the input table, value - alias for that column from **predictors**.

TabularColumnMeta class
=======================

Class `TabularColumnMeta` from `deepcortex.tabular.tabular_column_meta` module
is a descriptor for a table column. The definition for this class as follows:

.. code-block:: python

    from typing import NamedTuple
    from deepcortex.internal_api.baile.model.table import \
        TableColumnVariableType, TableColumnDataType


    class TabularColumnMeta(NamedTuple):
        """Table column definition, used to store predictions usually."""

        name: str
        display_name: str
        data_type: TableColumnDataType
        variable_type: TableColumnVariableType


Example of the Tabular Model class
==================================

.. code-block:: python

    from typing import List, Dict, Any
    import magictools as mt
    import pandas as pd
    from deepcortex.tabular.base_tabular_model import BaseTabularModel
    from deepcortex.tabular.tabular_column_meta import TabularColumnMeta


    class MyTabularModel(BaseTabularModel):
        def __init__(self):
            self.__train_result = None
            self.__classes = None
            self.__predictors = None
            self.__prediction_result_meta = None

        # Used to predict one row
        def predict_one(self, data: Dict[str, Any]) -> Any:]
            #
            # Here we do a prediction and return predicted value.
            #
            return mt.predict(row=data, model=self.__train_result)

        @property
        def classes(self) -> List[str]:
            return self.__classes

        @property
        def predictors(self) -> List[TabularColumnMeta]:
            return self.__predictors

        @property
        def prediction_result_meta(self) -> TabularColumnMeta:
            return self.__prediction_result_meta

        # Used to save state of the model into DeepCortex
        def get_state_dict(self) -> any:
            return self.__train_result

        # Used to load state of the model from DeepCortex
        def set_state_dict(self, state_dict: any):
            self.__train_result = state_dict
            self.__classes = self.__train_result['classes']
            self.__predictors = self.__train_result['predictors']
            self.__prediction_result_meta = self.__train_result['result']

        # Train the model
        def fit(self, train_table: pd.DataFrame):
            self.__train_result = mt.train_tabular_model(train_table)
            self.__classes = self.__train_result['classes']
            self.__predictors = self.__train_result['predictors']
            self.__prediction_result_meta = self.__train_result['result']


.. _CV_models:

6.2 Computer Vision (CV) Models
===============================

The base class for CV models is
`deepcortex.ml.cv.base_model import BaseModel`

In order to derive it, users have to implement the following methods and
properties:

- **classes** - property that returns list of classes the model can predict.
- **predict** - method that performs prediction on input dataset. As a parameter
  it accepts iterator over numpy's `ndarray` (collection of pictures, where
  each `ndarray` represents a picture). Returns a prediction result.
- **predict_proba** - method that perform prediction. The difference with
  the **predict** method is only in results.
- **get_state_dict** - method used for saving model state into storage. It
  should return any python structure of python primitives.
- **set_state_dict** - method used for loading model state (weights and/or any
  other information required by model).

Prediction result of CV Model
=============================

Depending on the type of CV Model, the result value of **predict** and **predict_proba**
methods differ.

Classification Model
====================

For the classification model, method **predict** should return a tuple with
the class name and it's confidence; method **predict_proba** should return
a list of probabilities of each class in the same order as property **classes**
returns names of classes.

Detection Model
===============

For the detection models the results are more complex; they also should include
information about bounding boxes. Method **predict** should return a list of
tuples like this: `(x_min, y_min, x_max, y_max, label, confidence)`.
Method **preduct_proba** should return of list of tuples
like this: `(x_min, y_min, x_max, y_max, <list of probs>)`,
where `<list of probs>` is a list of probabilities of each class in the same
order as property **classes** returns names of classes.

Example of the CV Model
=======================

.. code-block:: python

    from typing import List, Iterable, Iterator
    import magictools as mt
    import numpy as np
    from deepcortex.ml.cv.base_model import BaseModel, DetectionProbaResult, \
        DetectionResult


    class MyObjectDetectionModel(BaseModel):
        def __init__(self):
            self.__train_result = None
            self.__classes = None
            self.__predictors = None
            self.__prediction_result_meta = None

        def predict(self, data: Iterable[np.ndarray]) -> Iterator[DetectionResult]:
            for predictions in self.predict_proba(data):
                yield [
                    (
                        x_min,y_min, x_max, y_max,
                        self.classes[probas.index(max(probas))], max(probas)
                    )
                    for x_min, y_min, x_max, y_max, probas in predictions
                ]

        def predict_proba(self, data: Iterable[np.ndarray]) \
        -> Iterator[DetectionProbaResult]:
            for img in data:
                yield mt.predict(image=img, model=self.__train_result)

        @property
        def classes(self) -> List[str]:
            return self.__classes

        def get_state_dict(self) -> any:
            return self.__train_result

        def set_state_dict(self, state_dict: any):
            self.__train_result = state_dict
            self.__classes = self.__train_result['classes']

        # Train model
        def fit(self, train_dataset: List[np.ndarray]):
            self.__train_result = mt.train_detection_model(train_dataset)
            self.__classes = self.__train_result['classes']




Next: :ref:`DSL`